+General Notes+
+Formally define each object+
+Use many examples!+
+And also provide counter-examples for cases which are not expected to work!+

* Norg File Format Specification
  This file contains the formal file format specification of the _Norg_ syntax version 0.1.
  This document is written in the Norg format in its original form and, thus, attempts to be
  self-documenting.

** Introduction
   Before diving into the details we will start with a short introduction.
   The _Norg_ file format was designed as part of the [Neorg] plugin for Neovim which was started by
   /Vhyrro (@vhyrro)/ in April of 2021.
   Soon after starting this work, /Max Rossmannek (@mrossinek)/ joined the development team, and,
   with the help of the [Neorg] community, the two have shaped the _Norg_ syntax to what it has
   become today.

   [Neorg]{https://github.com/nvim-neorg/neorg}

*** What is Norg?
    The _Norg_ syntax is a plain-text file format which aims to be human readable when viewed
    standalone while also providing a suite of markup utilities for typesetting structured
    documents. Compared to other plain-text file formats like e.g. Markdown, RST or AsciiDoc, it
    sets itself apart most notably by following a strict philosophy to abide by the following simple
    rules:
    ~ *Consistency:* the syntax should be consistent. Even if you know only a part of the syntax,
      learning new parts should not be surprising and rather feel predictable and intuitive.
    ~ *Unambiguous:* the syntax should leave _no_ room for ambiguity. This is especially motivated
      by the use of [tree-sitter] for the original syntax parser which takes a strict left-to-right
      parsing approach and only has single-character look-ahead.
    ~ *[Free-form]:* whitespace is _only_ used to delimit tokens but has no other significance! This
      is probably the most contrasting feature to other plain-text formats which often adhere to the
      [off-side rule], meaning that the syntax relies on whitespace-indentation to carry meaning.

    [tree-sitter]{https://tree-sitter.github.io/tree-sitter/}
    [off-side rule]{https://en.wikipedia.org/wiki/Off-side_rule}
    [Free-form]{https://en.wikipedia.org/wiki/Free-form_language}

** Preliminaries
   First, we define some basic concepts which will be used in this specification.


*** Characters
    A _Norg_ file is made up of /characters/.
    A <character> is any Unicode [code point].

    [code point]{https://en.wikipedia.org/wiki/Code_point}

**** Whitespace
     A {> character} is considered to be *whitespace* if it is any of the following:
     - a tab `U+0009`
     - a line feed `U+000A`
     - a form feed `U+000C`
     - a carriage return `U+000D`
     - any code point in the [Unicode Zs general category] (includes the normal space `U+0020`)

     Any combination of the above is also considered whitespace.

     Tabs are not expanded to spaces and since whitespace has no semantic meaning there is no need
     to define a default tab stop. However, if a parser must (for implementation reasons) define a
     tab stop, we suggest to set it to 4 spaces.

     However, the following whitespace combinations are a <line ending>:
     - a single line feed
     - a single carriage return
     - a carriage return immediately followed by a line feed

     [Unicode Zs general category]{https://www.fileformat.info/info/unicode/category/Zs/list.htm}

**** Punctuation
     A {> character} is considered to be *punctuation* if it is any of the following:
     - a standard ASCII punctuation character: |`!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~`|
     - any punctuation character specific to the current locale
       +TODO(Vhyrro): check if this is what we really want. Currently taken from std::iswpunct docs+

**** Escaping
     A single {> character} can be escaped if it is immediately preceded by a backslash, `\`
     (`U+005C`).

**** Special Character
     TODO: formalize this section
     - Emojis
     - Should we support [entity references]?

     [entity references]{https://spec.commonmark.org/0.30/#entity-references}

*** Words
    The _Norg_ format is designed to be parsed on a word-by-word basis from left-to-right through
    the entire document /in a single pass/. This is possible, because the language is [Free-form],
    meaning that whitespace has no semantic meaning, and because the markup follows strict rules
    which are outlined in the later sections of this document.

    A *word* is considered any combinations of {> character}s which are neither {# Whitespace} nor
    {# Punctuation} or other {# Special Character}.

*** Paragraph Segments
    TODO

*** Paragraphs
    {# Words} are then combined into /paragraph _segments_/ which in turn make up a /paragraph/.
    A single {> line ending} will terminate a /paragraph _segment_/ *only* whereas two consecutive
    {> line ending}s are required to terminate a /paragraph/.

    Paragraphs can also contain {# Attached Modifiers} or {# Linkables} as will be explained later.

** Detached Modifiers
   _Norg_ has multiple detached modifiers. The name originates from their differentiation to the
   {# Attached Modifiers} which will be discussed later.
   All detached modifiers must abide by the following rules:
   - a detached modifier can _only_ occur at the beginning of the line (an arbitrary {# whitespace}
     (but nothing else!) may precede it)
   - a detached modifier must be immediately followed by {# whitespace} (incl. a {> line ending}) or
     another detached modifier of the same type

   The following list are the valid *detached* modifiers. The list also adds three possible
   properties to each category which will be explained in more detail below.
   - `*`: {# Headings} (structural, nestable)
   - `|`: {# Markers} (structural)
   - `-`: {# Unordered Lists} (nestable)
   - `~`: {# Ordered Lists} (nestable)
   - `>`: {# Quotes} (nestable)
   - `$`: {# Definitions} (range-able)
   - `^`: {# Footnotes} (range-able)
   - `=`: {# Insertions}
   - `?`: {# Multiple Choice Questions} +TODO: decide whether or not to make these range-able+

*** Standard Detached Modifiers
    The normal rules for the /standard/ detached modifiers are simple as outlined above. An
    important differentiation is, that standard detached modifiers may _not_ be succeeded by another
    detached modifier and instead require a whitespace immediately after them.
    They then affect the interpretation of the following `paragraph_segment` which generally means
    they extend up to the end of the current line.

    The standard detached modifiers in the _Norg_ syntax are:

**** Insertions
     @code norg
     = Insertion arg1 arg2 ...
     @end
     Depending on the kind of insertion, a different number of arguments can be set/required. These
     arguments follow the same rules as those of {# Tags}.
     ---

    Markers also belong to this set of detached modifiers but will only be discussed later as part
    of the {# Structural Detached Modifiers}.

*** Nestable Detached Modifiers
    Nestable detached modifiers are those kind which may be repeated multiple times in order to
    produce a _nested_ object of the given type. The nesting levels are capped at 6 in the
    [tree-sitter] parser but longer repetitions of the same modifier are allowed, falling back to
    the sixth nesting level. Other parses may choose to support higher nesting levels.

    Furthermore, in contrast to the {# Standard Detached Modifiers} this detached modifier type
    affects the following `paragraph` instead of only the next segment. This means that in order to
    terminate the detached modifier contents, you need two consecutive line breaks (forming a
    `paragraph_break`).

    Here are some correct examples of the nestable detached modifiers:

**** Unordered Lists
     @code norg
     - Unordered list level 1
     -- Unordered list level 2
     --- Unordered list level 3
     ---- Unordered list level 4
     ----- Unordered list level 5
     ------ Unordered list level 6
     ------- Unordered list level 7 (falls back to level 6 in the tree-sitter parser)
     @end

**** Ordered Lists
     @code norg
     ~ Ordered list level 1
     ~~ Ordered list level 2
     ~~~ Ordered list level 3
     ~~~~ Ordered list level 4
     ~~~~~ Ordered list level 5
     ~~~~~~ Ordered list level 6
     ~~~~~~~ Ordered list level 7 (falls back to level 6 in the tree~sitter parser)
     @end

**** Quotes
     @code norg
     > Quote level 1
     >> Quote level 2
     >>> Quote level 3
     >>>> Quote level 4
     >>>>> Quote level 5
     >>>>>> Quote level 6
     >>>>>>> Quote level 7 (falls back to level 6 in the tree-sitter parser)
     @end
     ---

    Headings are also /nestable/ detached modifiers but will only be discussed later as part of the
    {# Structural Detached Modifiers}.

*** Structural Detached Modifiers
    The `*` (headings) and `|` (marker) detached modifiers also have the _structural_ property,
    meaning that these objects *structure* the _Norg_ document.
    This detached modifier type only affects the following `paragraph_segment` (just like the {#
    standard detached modifiers}).

**** Headings
    @code norg
    * Heading level 1
    ** Heading level 2
    *** Heading level 3
    **** Heading level 4
    ***** Heading level 5
    ****** Heading level 6
    ******* Heading level 7 (falls back to level 6 in the tree-sitter parser)
    @end

    Although headings are both, structural and nestable, the former takes precedence over the
    latter, meaning that headings only affect a `paragraph_segment`. This is for user convenience as
    it does not require an empty line right below a heading.

**** Markers
     @code norg
     | Marker
     @end
     Markers are purely structural elements which split the entire document right down to the root
     node.

**** Delimiting Modifiers
     Although not technically a detached modifier, we would like to insert a note on {# Delimiting
     Modifiers} because they are immediately related to structuring a _Norg_ document. This kind of
     modifier must abide by the following rules:
     - a delimiting modifier can _only_ occur at the beginning of the line (an arbitrary
       {# whitespace} (but nothing else!) may precede it)
     - a delimiting modifier must consist of three or more consecutive modifiers of the same type
     - it must be followed by an immediate {> line ending} (without any extra {# whitespace})

***** Weak Delimiting Modifier
      This modifier uses the `-` character and immediately closes the current heading level.
      @code norg
      * Heading level 1
        Text under first level heading.

      ** Heading level 2
         Text under second level heading.
         ---

        Text under first level heading again.
      @end

***** Strong Delimiting Modifier
      This modifier uses the `=` character and immediately closes all heading levels.
      @code norg
      * Heading level 1
        Text under first level heading.

      ** Heading level 2
         Text under second level heading.
         ===

      Text belonging to no heading level (i.e. to the document's root node).
      @end

***** Horizontal Rule
      This modifier uses the `_` character and simply renders a horizontal line. It does _NOT_
      affect the heading level but immediately ends a {# paragraph}.
      @code norg
      * Heading level 1
        Text under first level heading.
        ___
        This is a new paragraph separated from the previous one by a horizontal line.
        This text still belongs to the first level heading.
      @end

*** Range-able Detached Modifiers
    Range-able detached modifiers can occur in two forms:
    - as a single detached modifier they affect:
    -- the next `paragraph_segment` which becomes the /title/
    -- the `paragraph` following that which becomes the /content/
    - or they can occur as a pair of two detached modifiers in which case:
    -- the next `paragraph_segment` still becomes the /title/
    -- but the content continues until the "closing" detached modifier is found

**** Definitions
     @code norg
     $ Single Definition
     Optional definition content.
     @end

     @code norg
     $$ Multiple Definition
     Content of the definition.

     Which scans up to the closing modifier.
     $$
     @end

**** Footnotes
     @code norg
     ^ Single Footnote
     Optional footnote content.
     @end

     @code norg
     ^^ Multiple Footnote
     Content of the footnote.

     Which scans up to the closing modifier.
     ^^
     @end

*** Complex Detached Modifiers
    - ToDo items `- [ ]`
    - Unordered links `->`
    - Ordered links `~>`

** Tags

** Attached Modifiers

** Linkables
*** Link Locations `{}`
*** Link Descriptions `[]`
*** Links `{} or {}[]`
*** Anchors `[] and []{}`
*** Inline Link Targets `<>`

|+ vim: set tw=100 :+|
